server:
  port: 8082
api:
  security:
    token:
      secret: ${JWT_SECRET:secret}
      issuer: ${JWT_ISSUER:myessen}
aws:
  accessKeyId: ${AWS_ACCESS_KEY_ID}
  secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
  sessionToken: ${AWS_SESSION_TOKEN}
#Spring config
spring:
  servlet:
    multipart:
      max-file-size: 500KB
      max-request-size: 500KB
  profiles:
    active: prod
# Import .env file as if it were a .properties file
  config:
    import: optional:classpath:.env[.properties]
  application:
    name: blog-service
############################################################################################
#H2 database, in memory
  datasource:
     vendor: h2
     url: jdbc:h2:mem:demo
     username: sa
     password: password
     driverClassName: org.h2.Driver
  h2:
     console:
       enabled: true
  jpa:
    properties:
      hibernate:
        format_sql: true
#OAuth2Clients
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            scope: user
          facebook:
            client-id: ${FACEBOOK_CLIENT_ID}
            client-secret: ${FACEBOOK_CLIENT_SECRET}
#JavaMailSender
mail:
  username: ${MAIL_USERNAME}
  password: ${MAIL_PASSWORD}
logging:
  level:
    org.hibernate.sql: TRACE
    org.springframework.security: TRACE

---
#for prod profile
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    vendor: postgres
    url: ${POSTGRES_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driverClassName: org.postgresql.Driver
  h2:
    console:
      enabled: false