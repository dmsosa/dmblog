# datasource: h2
datasource: postgres
server:
  port: 8082
api:
  security:
    token:
      secret: ${JWT_SECRET:secret}
      issuer: ${JWT_ISSUER:myessen}

#Spring config
spring:
# Import .env file as if it were a .properties file
  config:
    import: optional:classpath:.env[.properties]
  application:
    name: blog-service
############################################################################################
#H2 database, in memory **You can uncomment this to switch to a H2 in memory database**
#  datasource:
#     url: jdbc:h2:mem:demo
#     username: sa
#     password: password
#     driverClassName: org.h2.Driver
#  h2:
#     console:
#       enabled: true
############################################################################################
  datasource:
    url: jdbc:postgresql://localhost:5432/dmsosa
    username: postgres
    password: ${POSTGRES_PASSWORD}
    driverClassName: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        format_sql: true
#OAuth2Clients
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            scope: user
          facebook:
            client-id: ${FACEBOOK_CLIENT_ID}
            client-secret: ${FACEBOOK_CLIENT_SECRET}
#JavaMailSender
mail:
  username: ${MAIL_USERNAME}
  password: ${MAIL_PASSWORD}
logging:
  level:
    org.hibernate.sql: TRACE
    org.springframework.security: TRACE


---
#for prod profile, we use a postgres database running in a docker container
datasource: postgres
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${POSTGRES_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driverClassName: org.postgresql.Driver
  h2:
    console:
      enabled: false
